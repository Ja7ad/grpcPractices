// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BalanceServiceClient is the client API for BalanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BalanceServiceClient interface {
	GetBalance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (BalanceService_GetBalanceClient, error)
}

type balanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBalanceServiceClient(cc grpc.ClientConnInterface) BalanceServiceClient {
	return &balanceServiceClient{cc}
}

func (c *balanceServiceClient) GetBalance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (BalanceService_GetBalanceClient, error) {
	stream, err := c.cc.NewStream(ctx, &BalanceService_ServiceDesc.Streams[0], "/BalanceService/GetBalance", opts...)
	if err != nil {
		return nil, err
	}
	x := &balanceServiceGetBalanceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BalanceService_GetBalanceClient interface {
	Recv() (*BalanceResp, error)
	grpc.ClientStream
}

type balanceServiceGetBalanceClient struct {
	grpc.ClientStream
}

func (x *balanceServiceGetBalanceClient) Recv() (*BalanceResp, error) {
	m := new(BalanceResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BalanceServiceServer is the server API for BalanceService service.
// All implementations must embed UnimplementedBalanceServiceServer
// for forward compatibility
type BalanceServiceServer interface {
	GetBalance(*BalanceReq, BalanceService_GetBalanceServer) error
	mustEmbedUnimplementedBalanceServiceServer()
}

// UnimplementedBalanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBalanceServiceServer struct {
}

func (UnimplementedBalanceServiceServer) GetBalance(*BalanceReq, BalanceService_GetBalanceServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedBalanceServiceServer) mustEmbedUnimplementedBalanceServiceServer() {}

// UnsafeBalanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BalanceServiceServer will
// result in compilation errors.
type UnsafeBalanceServiceServer interface {
	mustEmbedUnimplementedBalanceServiceServer()
}

func RegisterBalanceServiceServer(s grpc.ServiceRegistrar, srv BalanceServiceServer) {
	s.RegisterService(&BalanceService_ServiceDesc, srv)
}

func _BalanceService_GetBalance_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BalanceReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BalanceServiceServer).GetBalance(m, &balanceServiceGetBalanceServer{stream})
}

type BalanceService_GetBalanceServer interface {
	Send(*BalanceResp) error
	grpc.ServerStream
}

type balanceServiceGetBalanceServer struct {
	grpc.ServerStream
}

func (x *balanceServiceGetBalanceServer) Send(m *BalanceResp) error {
	return x.ServerStream.SendMsg(m)
}

// BalanceService_ServiceDesc is the grpc.ServiceDesc for BalanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BalanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BalanceService",
	HandlerType: (*BalanceServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBalance",
			Handler:       _BalanceService_GetBalance_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/balance/balance.proto",
}
